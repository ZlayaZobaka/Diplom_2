{"name": "Тест попытки создания заказа в котором один из ингредиентов с неверным id", "status": "failed", "statusDetails": {"message": "AssertionError: assert (200 == 400)\n +  where 200 = <Response [200]>.status_code", "trace": "self = <test_orders.TestOrders object at 0x000001EF84C13C50>, register_user_payload = {'email': 'jamiemendez@mytests.com', 'name': 'Fear.', 'password': 'Let.'}\nget_ingredients = {'buns': ['61c0c5a71d1f82001bdaaa6d', '61c0c5a71d1f82001bdaaa6c'], 'mains': ['61c0c5a71d1f82001bdaaa6f', '61c0c5a71d1f...ces': ['61c0c5a71d1f82001bdaaa72', '61c0c5a71d1f82001bdaaa73', '61c0c5a71d1f82001bdaaa74', '61c0c5a71d1f82001bdaaa75']}\ncount = 3\n\n    @allure.title('Тест попытки создания заказа в котором один из ингредиентов с неверным id')\n    @allure.description('Запрос создания заказа с неверным id ингредиента возвращает ошибку Bad Request')\n    @pytest.mark.parametrize('count', [1, 3])\n    def test_create_order_bad_ingredient_id_return_bad_request_error(\n            self, register_user_payload, get_ingredients, count):\n        api = Api()\n        api.register_user(register_user_payload)\n        ids = helpers.get_recipe(get_ingredients, count)\n        ids[0] = WellKnownConstants.UNKNOWN_ID\n        response = api.create_order({'ingredients': ids})\n    \n>       assert (response.status_code == requests.codes['bad_request'] and\n                response.json()['message'] == ErrorMsg.UNKNOWN_INGREDIENT_ID)\nE       assert (200 == 400)\nE        +  where 200 = <Response [200]>.status_code\n\ntests\\test_orders.py:57: AssertionError"}, "description": "Запрос создания заказа с неверным id ингредиента возвращает ошибку Bad Request", "steps": [{"name": "Отправляем запрос на создание пользователя", "status": "passed", "steps": [{"name": "Сохраняем accessToken-токен", "status": "passed", "parameters": [{"name": "token", "value": "'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2NjA5ZGU1OWVkMjgwMDAxYjQyYzNlZiIsImlhdCI6MTcxNzYwNzkwOSwiZXhwIjoxNzE3NjA5MTA5fQ.c4WwuPohhGHslm7HRF4oQY-_DRKuInOE7sByk2U51DY'"}], "start": 1717607908985, "stop": 1717607908985}], "parameters": [{"name": "payload", "value": "{'email': 'jamiemendez@mytests.com', 'name': 'Fear.', 'password': 'Let.'}"}], "start": 1717607908108, "stop": 1717607908985}, {"name": "Отправляем запрос на создание заказа", "status": "passed", "parameters": [{"name": "payload", "value": "{'ingredients': ['00c0c5a71d1f82001bdaaa70', '61c0c5a71d1f82001bdaaa75', '61c0c5a71d1f82001bdaaa70']}"}], "start": 1717607909298, "stop": 1717607911013}], "parameters": [{"name": "count", "value": "3"}], "start": 1717607908107, "stop": 1717607911013, "uuid": "d7f91364-9b42-49d8-a0bd-e19b85033e23", "historyId": "7130d76ffb15b1c1005959d69ebd249d", "testCaseId": "c63db08e17d59afe6d0e929435fdff5b", "fullName": "tests.test_orders.TestOrders#test_create_order_bad_ingredient_id_return_bad_request_error", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_orders"}, {"name": "subSuite", "value": "TestOrders"}, {"name": "host", "value": "DESKTOP-9PI1IG9"}, {"name": "thread", "value": "5516-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_orders"}]}